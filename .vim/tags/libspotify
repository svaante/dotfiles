!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
PUBLIC_API_H	api.h	21;"	d	language:C++
SPOTIFY_API_VERSION	api.h	165;"	d	language:C++
SP_ALBUMTYPE_ALBUM	api.h	/^  SP_ALBUMTYPE_ALBUM       = 0, \/\/\/< Normal album$/;"	e	language:C++	enum:__anon2
SP_ALBUMTYPE_COMPILATION	api.h	/^  SP_ALBUMTYPE_COMPILATION = 2, \/\/\/< Compilation$/;"	e	language:C++	enum:__anon2
SP_ALBUMTYPE_SINGLE	api.h	/^  SP_ALBUMTYPE_SINGLE      = 1, \/\/\/< Single$/;"	e	language:C++	enum:__anon2
SP_ALBUMTYPE_UNKNOWN	api.h	/^  SP_ALBUMTYPE_UNKNOWN     = 3, \/\/\/< Unknown type$/;"	e	language:C++	enum:__anon2
SP_ARTISTBROWSE_FULL	api.h	/^  SP_ARTISTBROWSE_FULL,         \/**< All information except tophit tracks$/;"	e	language:C++	enum:sp_artistbrowse_type
SP_ARTISTBROWSE_NO_ALBUMS	api.h	/^  SP_ARTISTBROWSE_NO_ALBUMS,    \/**< Only return data about the artist (artist name, similar artist$/;"	e	language:C++	enum:sp_artistbrowse_type
SP_ARTISTBROWSE_NO_TRACKS	api.h	/^  SP_ARTISTBROWSE_NO_TRACKS,    \/**< Only albums and data about them, no tracks.$/;"	e	language:C++	enum:sp_artistbrowse_type
SP_BITRATE_160k	api.h	/^  SP_BITRATE_160k      = 0, \/\/\/< Bitrate 160kbps$/;"	e	language:C++	enum:sp_bitrate
SP_BITRATE_320k	api.h	/^  SP_BITRATE_320k      = 1, \/\/\/< Bitrate 320kbps$/;"	e	language:C++	enum:sp_bitrate
SP_BITRATE_96k	api.h	/^  SP_BITRATE_96k       = 2, \/\/\/< Bitrate 96kbps$/;"	e	language:C++	enum:sp_bitrate
SP_CALLCONV	api.h	29;"	d	language:C++
SP_CALLCONV	api.h	31;"	d	language:C++
SP_CONNECTION_RULE_ALLOW_SYNC_OVER_MOBILE	api.h	/^  SP_CONNECTION_RULE_ALLOW_SYNC_OVER_MOBILE = 0x4, \/\/\/< Set to allow syncing of offline content over mobile connections$/;"	e	language:C++	enum:sp_connection_rules
SP_CONNECTION_RULE_ALLOW_SYNC_OVER_WIFI	api.h	/^  SP_CONNECTION_RULE_ALLOW_SYNC_OVER_WIFI   = 0x8, \/\/\/< Set to allow syncing of offline content over WiFi$/;"	e	language:C++	enum:sp_connection_rules
SP_CONNECTION_RULE_NETWORK	api.h	/^  SP_CONNECTION_RULE_NETWORK                = 0x1, \/\/\/< Allow network traffic. When not set libspotify will force itself into offline mode$/;"	e	language:C++	enum:sp_connection_rules
SP_CONNECTION_RULE_NETWORK_IF_ROAMING	api.h	/^  SP_CONNECTION_RULE_NETWORK_IF_ROAMING     = 0x2, \/\/\/< Allow network traffic even if roaming$/;"	e	language:C++	enum:sp_connection_rules
SP_CONNECTION_STATE_DISCONNECTED	api.h	/^  SP_CONNECTION_STATE_DISCONNECTED = 2, \/\/\/< Was logged in, but has now been disconnected$/;"	e	language:C++	enum:sp_connectionstate
SP_CONNECTION_STATE_LOGGED_IN	api.h	/^  SP_CONNECTION_STATE_LOGGED_IN    = 1, \/\/\/< Logged in against a Spotify access point$/;"	e	language:C++	enum:sp_connectionstate
SP_CONNECTION_STATE_LOGGED_OUT	api.h	/^  SP_CONNECTION_STATE_LOGGED_OUT   = 0, \/\/\/< User not yet logged in$/;"	e	language:C++	enum:sp_connectionstate
SP_CONNECTION_STATE_OFFLINE	api.h	/^  SP_CONNECTION_STATE_OFFLINE    = 4  \/\/\/< Logged in in offline mode$/;"	e	language:C++	enum:sp_connectionstate
SP_CONNECTION_STATE_UNDEFINED	api.h	/^  SP_CONNECTION_STATE_UNDEFINED    = 3, \/\/\/< The connection state is undefined$/;"	e	language:C++	enum:sp_connectionstate
SP_CONNECTION_TYPE_MOBILE	api.h	/^  SP_CONNECTION_TYPE_MOBILE         = 2, \/\/\/< Mobile data (EDGE, 3G, etc)$/;"	e	language:C++	enum:sp_connection_type
SP_CONNECTION_TYPE_MOBILE_ROAMING	api.h	/^  SP_CONNECTION_TYPE_MOBILE_ROAMING = 3, \/\/\/< Roamed mobile data (EDGE, 3G, etc)$/;"	e	language:C++	enum:sp_connection_type
SP_CONNECTION_TYPE_NONE	api.h	/^  SP_CONNECTION_TYPE_NONE           = 1, \/\/\/< No connection$/;"	e	language:C++	enum:sp_connection_type
SP_CONNECTION_TYPE_UNKNOWN	api.h	/^  SP_CONNECTION_TYPE_UNKNOWN        = 0, \/\/\/< Connection type unknown (Default)$/;"	e	language:C++	enum:sp_connection_type
SP_CONNECTION_TYPE_WIFI	api.h	/^  SP_CONNECTION_TYPE_WIFI           = 4, \/\/\/< Wireless connection$/;"	e	language:C++	enum:sp_connection_type
SP_CONNECTION_TYPE_WIRED	api.h	/^  SP_CONNECTION_TYPE_WIRED          = 5, \/\/\/< Ethernet cable, etc$/;"	e	language:C++	enum:sp_connection_type
SP_ERROR_API_INITIALIZATION_FAILED	api.h	/^  SP_ERROR_API_INITIALIZATION_FAILED = 2,  \/\/\/< Initialization of library failed - are cache locations etc. valid?$/;"	e	language:C++	enum:sp_error
SP_ERROR_APPLICATION_BANNED	api.h	/^  SP_ERROR_APPLICATION_BANNED        = 27, \/\/\/< This application is no longer allowed to use the Spotify service$/;"	e	language:C++	enum:sp_error
SP_ERROR_BAD_API_VERSION	api.h	/^  SP_ERROR_BAD_API_VERSION           = 1,  \/\/\/< The library version targeted does not match the one you claim you support$/;"	e	language:C++	enum:sp_error
SP_ERROR_BAD_APPLICATION_KEY	api.h	/^  SP_ERROR_BAD_APPLICATION_KEY       = 5,  \/\/\/< The application key is invalid$/;"	e	language:C++	enum:sp_error
SP_ERROR_BAD_USERNAME_OR_PASSWORD	api.h	/^  SP_ERROR_BAD_USERNAME_OR_PASSWORD  = 6,  \/\/\/< Login failed because of bad username and\/or password$/;"	e	language:C++	enum:sp_error
SP_ERROR_BAD_USER_AGENT	api.h	/^  SP_ERROR_BAD_USER_AGENT            = 11, \/\/\/< The user agent string is invalid or too long$/;"	e	language:C++	enum:sp_error
SP_ERROR_CANT_OPEN_TRACE_FILE	api.h	/^  SP_ERROR_CANT_OPEN_TRACE_FILE      = 26, \/\/\/< Unable to open trace file$/;"	e	language:C++	enum:sp_error
SP_ERROR_CLIENT_TOO_OLD	api.h	/^  SP_ERROR_CLIENT_TOO_OLD            = 9,  \/\/\/< Client is too old, library will need to be updated$/;"	e	language:C++	enum:sp_error
SP_ERROR_INBOX_IS_FULL	api.h	/^  SP_ERROR_INBOX_IS_FULL             = 20, \/\/\/< Target inbox is full$/;"	e	language:C++	enum:sp_error
SP_ERROR_INDEX_OUT_OF_RANGE	api.h	/^  SP_ERROR_INDEX_OUT_OF_RANGE        = 14, \/\/\/< Index out of range$/;"	e	language:C++	enum:sp_error
SP_ERROR_INVALID_ARGUMENT	api.h	/^  SP_ERROR_INVALID_ARGUMENT          = 40, \/\/\/< An invalid argument was specified$/;"	e	language:C++	enum:sp_error
SP_ERROR_INVALID_DEVICE_ID	api.h	/^  SP_ERROR_INVALID_DEVICE_ID         = 25, \/\/\/< Invalid device ID$/;"	e	language:C++	enum:sp_error
SP_ERROR_INVALID_INDATA	api.h	/^  SP_ERROR_INVALID_INDATA            = 13, \/\/\/< Input data was either missing or invalid$/;"	e	language:C++	enum:sp_error
SP_ERROR_IS_LOADING	api.h	/^  SP_ERROR_IS_LOADING                = 17, \/\/\/< The resource is currently loading$/;"	e	language:C++	enum:sp_error
SP_ERROR_LASTFM_AUTH_ERROR	api.h	/^  SP_ERROR_LASTFM_AUTH_ERROR         = 39, \/\/\/< A LastFM scrobble authentication error has occurred$/;"	e	language:C++	enum:sp_error
SP_ERROR_MISSING_CALLBACK	api.h	/^  SP_ERROR_MISSING_CALLBACK          = 12, \/\/\/< No valid callback registered to handle events$/;"	e	language:C++	enum:sp_error
SP_ERROR_NETWORK_DISABLED	api.h	/^  SP_ERROR_NETWORK_DISABLED          = 24, \/\/\/< Network disabled$/;"	e	language:C++	enum:sp_error
SP_ERROR_NO_CACHE	api.h	/^  SP_ERROR_NO_CACHE                  = 21, \/\/\/< Cache is not enabled$/;"	e	language:C++	enum:sp_error
SP_ERROR_NO_CREDENTIALS	api.h	/^  SP_ERROR_NO_CREDENTIALS            = 23, \/\/\/< No credentials are stored$/;"	e	language:C++	enum:sp_error
SP_ERROR_NO_STREAM_AVAILABLE	api.h	/^  SP_ERROR_NO_STREAM_AVAILABLE       = 18, \/\/\/< Could not find any suitable stream to play$/;"	e	language:C++	enum:sp_error
SP_ERROR_NO_SUCH_USER	api.h	/^  SP_ERROR_NO_SUCH_USER              = 22, \/\/\/< Requested user does not exist$/;"	e	language:C++	enum:sp_error
SP_ERROR_OFFLINE_DISK_CACHE	api.h	/^  SP_ERROR_OFFLINE_DISK_CACHE        = 32, \/\/\/< Disk cache is full so no more tracks can be downloaded to offline mode$/;"	e	language:C++	enum:sp_error
SP_ERROR_OFFLINE_EXPIRED	api.h	/^  SP_ERROR_OFFLINE_EXPIRED           = 33, \/\/\/< Offline key has expired, the user needs to go online again$/;"	e	language:C++	enum:sp_error
SP_ERROR_OFFLINE_LICENSE_ERROR	api.h	/^  SP_ERROR_OFFLINE_LICENSE_ERROR     = 36, \/\/\/< The Spotify license server does not respond correctly$/;"	e	language:C++	enum:sp_error
SP_ERROR_OFFLINE_LICENSE_LOST	api.h	/^  SP_ERROR_OFFLINE_LICENSE_LOST      = 35, \/\/\/< The license for this device has been lost. Most likely because the user used offline on three other device$/;"	e	language:C++	enum:sp_error
SP_ERROR_OFFLINE_NOT_ALLOWED	api.h	/^  SP_ERROR_OFFLINE_NOT_ALLOWED       = 34, \/\/\/< This user is not allowed to use offline mode$/;"	e	language:C++	enum:sp_error
SP_ERROR_OFFLINE_TOO_MANY_TRACKS	api.h	/^  SP_ERROR_OFFLINE_TOO_MANY_TRACKS   = 31, \/\/\/< Reached the device limit for number of tracks to download$/;"	e	language:C++	enum:sp_error
SP_ERROR_OK	api.h	/^  SP_ERROR_OK                        = 0,  \/\/\/< No errors encountered$/;"	e	language:C++	enum:sp_error
SP_ERROR_OTHER_PERMANENT	api.h	/^  SP_ERROR_OTHER_PERMANENT           = 10, \/\/\/< Some other error occurred, and it is permanent (e.g. trying to relogin will not help)$/;"	e	language:C++	enum:sp_error
SP_ERROR_OTHER_TRANSIENT	api.h	/^  SP_ERROR_OTHER_TRANSIENT           = 16, \/\/\/< A transient error occurred.$/;"	e	language:C++	enum:sp_error
SP_ERROR_PERMISSION_DENIED	api.h	/^  SP_ERROR_PERMISSION_DENIED         = 19, \/\/\/< Requested operation is not allowed$/;"	e	language:C++	enum:sp_error
SP_ERROR_SYSTEM_FAILURE	api.h	/^  SP_ERROR_SYSTEM_FAILURE            = 41, \/\/\/< An operating system error$/;"	e	language:C++	enum:sp_error
SP_ERROR_TRACK_NOT_PLAYABLE	api.h	/^  SP_ERROR_TRACK_NOT_PLAYABLE        = 3,  \/\/\/< The track specified for playing cannot be played$/;"	e	language:C++	enum:sp_error
SP_ERROR_UNABLE_TO_CONTACT_SERVER	api.h	/^  SP_ERROR_UNABLE_TO_CONTACT_SERVER  = 8,  \/\/\/< Cannot connect to the Spotify backend system$/;"	e	language:C++	enum:sp_error
SP_ERROR_USER_BANNED	api.h	/^  SP_ERROR_USER_BANNED               = 7,  \/\/\/< The specified username is banned$/;"	e	language:C++	enum:sp_error
SP_ERROR_USER_NEEDS_PREMIUM	api.h	/^  SP_ERROR_USER_NEEDS_PREMIUM        = 15, \/\/\/< The specified user needs a premium account$/;"	e	language:C++	enum:sp_error
SP_IMAGE_FORMAT_JPEG	api.h	/^  SP_IMAGE_FORMAT_JPEG   = 0,   \/\/\/< JPEG image$/;"	e	language:C++	enum:__anon3
SP_IMAGE_FORMAT_UNKNOWN	api.h	/^  SP_IMAGE_FORMAT_UNKNOWN = -1, \/\/\/< Unknown image format$/;"	e	language:C++	enum:__anon3
SP_IMAGE_SIZE_LARGE	api.h	/^  SP_IMAGE_SIZE_LARGE                   = 2, \/\/\/< Large image size$/;"	e	language:C++	enum:sp_image_size
SP_IMAGE_SIZE_NORMAL	api.h	/^  SP_IMAGE_SIZE_NORMAL                  = 0, \/\/\/< Normal image size$/;"	e	language:C++	enum:sp_image_size
SP_IMAGE_SIZE_SMALL	api.h	/^  SP_IMAGE_SIZE_SMALL                   = 1, \/\/\/< Small image size$/;"	e	language:C++	enum:sp_image_size
SP_LIBEXPORT	api.h	37;"	d	language:C++
SP_LIBEXPORT	api.h	39;"	d	language:C++
SP_LINKTYPE_ALBUM	api.h	/^  SP_LINKTYPE_ALBUM    = 2, \/\/\/< Link type is album$/;"	e	language:C++	enum:__anon1
SP_LINKTYPE_ARTIST	api.h	/^  SP_LINKTYPE_ARTIST   = 3, \/\/\/< Link type is artist$/;"	e	language:C++	enum:__anon1
SP_LINKTYPE_IMAGE	api.h	/^  SP_LINKTYPE_IMAGE = 9, \/\/\/< Link type is an image$/;"	e	language:C++	enum:__anon1
SP_LINKTYPE_INVALID	api.h	/^  SP_LINKTYPE_INVALID  = 0, \/\/\/< Link type not valid - default until the library has parsed the link, or when parsing failed$/;"	e	language:C++	enum:__anon1
SP_LINKTYPE_LOCALTRACK	api.h	/^  SP_LINKTYPE_LOCALTRACK  = 8, \/\/\/< Link type is a local file$/;"	e	language:C++	enum:__anon1
SP_LINKTYPE_PLAYLIST	api.h	/^  SP_LINKTYPE_PLAYLIST = 5, \/\/\/< Link type is playlist$/;"	e	language:C++	enum:__anon1
SP_LINKTYPE_PROFILE	api.h	/^  SP_LINKTYPE_PROFILE  = 6, \/\/\/< Link type is profile$/;"	e	language:C++	enum:__anon1
SP_LINKTYPE_SEARCH	api.h	/^  SP_LINKTYPE_SEARCH   = 4, \/\/\/< Link type is search$/;"	e	language:C++	enum:__anon1
SP_LINKTYPE_STARRED	api.h	/^  SP_LINKTYPE_STARRED  = 7, \/\/\/< Link type is starred$/;"	e	language:C++	enum:__anon1
SP_LINKTYPE_TRACK	api.h	/^  SP_LINKTYPE_TRACK    = 1, \/\/\/< Link type is track$/;"	e	language:C++	enum:__anon1
SP_PLAYLIST_OFFLINE_STATUS_DOWNLOADING	api.h	/^  SP_PLAYLIST_OFFLINE_STATUS_DOWNLOADING = 2, \/\/\/< This playlist is currently downloading. Only one playlist can be in this state any given time$/;"	e	language:C++	enum:sp_playlist_offline_status
SP_PLAYLIST_OFFLINE_STATUS_NO	api.h	/^  SP_PLAYLIST_OFFLINE_STATUS_NO          = 0, \/\/\/< Playlist is not offline enabled$/;"	e	language:C++	enum:sp_playlist_offline_status
SP_PLAYLIST_OFFLINE_STATUS_WAITING	api.h	/^  SP_PLAYLIST_OFFLINE_STATUS_WAITING     = 3, \/\/\/< Playlist is queued for download$/;"	e	language:C++	enum:sp_playlist_offline_status
SP_PLAYLIST_OFFLINE_STATUS_YES	api.h	/^  SP_PLAYLIST_OFFLINE_STATUS_YES         = 1, \/\/\/< Playlist is synchronized to local storage$/;"	e	language:C++	enum:sp_playlist_offline_status
SP_PLAYLIST_TYPE_END_FOLDER	api.h	/^  SP_PLAYLIST_TYPE_END_FOLDER   = 2, \/\/\/< and ending point.$/;"	e	language:C++	enum:sp_playlist_type
SP_PLAYLIST_TYPE_PLACEHOLDER	api.h	/^  SP_PLAYLIST_TYPE_PLACEHOLDER  = 3, \/\/\/< Unknown entry.$/;"	e	language:C++	enum:sp_playlist_type
SP_PLAYLIST_TYPE_PLAYLIST	api.h	/^  SP_PLAYLIST_TYPE_PLAYLIST     = 0, \/\/\/< A normal playlist.$/;"	e	language:C++	enum:sp_playlist_type
SP_PLAYLIST_TYPE_START_FOLDER	api.h	/^  SP_PLAYLIST_TYPE_START_FOLDER = 1, \/\/\/< Marks a folder starting point,$/;"	e	language:C++	enum:sp_playlist_type
SP_RELATION_TYPE_BIDIRECTIONAL	api.h	/^  SP_RELATION_TYPE_BIDIRECTIONAL = 3,    \/\/\/< Bidirectional friendship established$/;"	e	language:C++	enum:sp_relation_type
SP_RELATION_TYPE_NONE	api.h	/^  SP_RELATION_TYPE_NONE = 1,             \/\/\/< No relation$/;"	e	language:C++	enum:sp_relation_type
SP_RELATION_TYPE_UNIDIRECTIONAL	api.h	/^  SP_RELATION_TYPE_UNIDIRECTIONAL = 2,   \/\/\/< The currently logged in user is following this uer$/;"	e	language:C++	enum:sp_relation_type
SP_RELATION_TYPE_UNKNOWN	api.h	/^  SP_RELATION_TYPE_UNKNOWN = 0,          \/\/\/< Not yet known$/;"	e	language:C++	enum:sp_relation_type
SP_SAMPLETYPE_INT16_NATIVE_ENDIAN	api.h	/^  SP_SAMPLETYPE_INT16_NATIVE_ENDIAN = 0, \/\/\/< 16-bit signed integer samples$/;"	e	language:C++	enum:sp_sampletype
SP_SCROBBLING_STATE_GLOBAL_DISABLED	api.h	/^  SP_SCROBBLING_STATE_GLOBAL_DISABLED       = 4,$/;"	e	language:C++	enum:sp_scrobbling_state
SP_SCROBBLING_STATE_GLOBAL_ENABLED	api.h	/^  SP_SCROBBLING_STATE_GLOBAL_ENABLED        = 3,$/;"	e	language:C++	enum:sp_scrobbling_state
SP_SCROBBLING_STATE_LOCAL_DISABLED	api.h	/^  SP_SCROBBLING_STATE_LOCAL_DISABLED        = 2,$/;"	e	language:C++	enum:sp_scrobbling_state
SP_SCROBBLING_STATE_LOCAL_ENABLED	api.h	/^  SP_SCROBBLING_STATE_LOCAL_ENABLED         = 1,$/;"	e	language:C++	enum:sp_scrobbling_state
SP_SCROBBLING_STATE_USE_GLOBAL_SETTING	api.h	/^  SP_SCROBBLING_STATE_USE_GLOBAL_SETTING    = 0,$/;"	e	language:C++	enum:sp_scrobbling_state
SP_SEARCH_STANDARD	api.h	/^  SP_SEARCH_STANDARD  = 0,$/;"	e	language:C++	enum:sp_search_type
SP_SEARCH_SUGGEST	api.h	/^  SP_SEARCH_SUGGEST = 1,$/;"	e	language:C++	enum:sp_search_type
SP_SOCIAL_PROVIDER_FACEBOOK	api.h	/^  SP_SOCIAL_PROVIDER_FACEBOOK,$/;"	e	language:C++	enum:sp_social_provider
SP_SOCIAL_PROVIDER_LASTFM	api.h	/^  SP_SOCIAL_PROVIDER_LASTFM,$/;"	e	language:C++	enum:sp_social_provider
SP_SOCIAL_PROVIDER_SPOTIFY	api.h	/^  SP_SOCIAL_PROVIDER_SPOTIFY,$/;"	e	language:C++	enum:sp_social_provider
SP_TOPLIST_REGION	api.h	3702;"	d	language:C++
SP_TOPLIST_REGION_EVERYWHERE	api.h	/^  SP_TOPLIST_REGION_EVERYWHERE = 0, \/\/\/< Global toplist$/;"	e	language:C++	enum:__anon5
SP_TOPLIST_REGION_USER	api.h	/^  SP_TOPLIST_REGION_USER = 1,       \/\/\/< Toplist for a given user$/;"	e	language:C++	enum:__anon5
SP_TOPLIST_TYPE_ALBUMS	api.h	/^  SP_TOPLIST_TYPE_ALBUMS  = 1, \/\/\/< Top albums$/;"	e	language:C++	enum:__anon4
SP_TOPLIST_TYPE_ARTISTS	api.h	/^  SP_TOPLIST_TYPE_ARTISTS = 0, \/\/\/< Top artists$/;"	e	language:C++	enum:__anon4
SP_TOPLIST_TYPE_TRACKS	api.h	/^  SP_TOPLIST_TYPE_TRACKS  = 2, \/\/\/< Top tracks$/;"	e	language:C++	enum:__anon4
SP_TRACK_AVAILABILITY_AVAILABLE	api.h	/^  SP_TRACK_AVAILABILITY_AVAILABLE   = 1, \/\/\/< Track is available and can be played$/;"	e	language:C++	enum:sp_availability
SP_TRACK_AVAILABILITY_BANNED_BY_ARTIST	api.h	/^  SP_TRACK_AVAILABILITY_BANNED_BY_ARTIST = 3, \/\/\/< Track not available on artist's reqeust$/;"	e	language:C++	enum:sp_availability
SP_TRACK_AVAILABILITY_NOT_STREAMABLE	api.h	/^  SP_TRACK_AVAILABILITY_NOT_STREAMABLE = 2, \/\/\/< Track can not be streamed using this account$/;"	e	language:C++	enum:sp_availability
SP_TRACK_AVAILABILITY_UNAVAILABLE	api.h	/^  SP_TRACK_AVAILABILITY_UNAVAILABLE = 0, \/\/\/< Track is not available$/;"	e	language:C++	enum:sp_availability
SP_TRACK_OFFLINE_DONE	api.h	/^  SP_TRACK_OFFLINE_DONE           = 3, \/\/\/< Downloaded OK and can be played$/;"	e	language:C++	enum:sp_track_offline_status
SP_TRACK_OFFLINE_DONE_EXPIRED	api.h	/^  SP_TRACK_OFFLINE_DONE_EXPIRED   = 5, \/\/\/< Downloaded OK but not playable due to expiery$/;"	e	language:C++	enum:sp_track_offline_status
SP_TRACK_OFFLINE_DONE_RESYNC	api.h	/^  SP_TRACK_OFFLINE_DONE_RESYNC    = 7, \/\/\/< Downloaded OK and available but scheduled for re-download$/;"	e	language:C++	enum:sp_track_offline_status
SP_TRACK_OFFLINE_DOWNLOADING	api.h	/^  SP_TRACK_OFFLINE_DOWNLOADING    = 2, \/\/\/< Currently downloading$/;"	e	language:C++	enum:sp_track_offline_status
SP_TRACK_OFFLINE_ERROR	api.h	/^  SP_TRACK_OFFLINE_ERROR          = 4, \/\/\/< Error during download$/;"	e	language:C++	enum:sp_track_offline_status
SP_TRACK_OFFLINE_LIMIT_EXCEEDED	api.h	/^  SP_TRACK_OFFLINE_LIMIT_EXCEEDED = 6, \/\/\/< Waiting because device have reached max number of allowed tracks$/;"	e	language:C++	enum:sp_track_offline_status
SP_TRACK_OFFLINE_NO	api.h	/^  SP_TRACK_OFFLINE_NO             = 0, \/\/\/< Not marked for offline$/;"	e	language:C++	enum:sp_track_offline_status
SP_TRACK_OFFLINE_WAITING	api.h	/^  SP_TRACK_OFFLINE_WAITING        = 1, \/\/\/< Waiting for download$/;"	e	language:C++	enum:sp_track_offline_status
alb	api.h	/^SP_LIBEXPORT(bool) sp_albumbrowse_is_loaded(sp_albumbrowse *alb);$/;"	v	language:C++
alb	api.h	/^SP_LIBEXPORT(const char *) sp_albumbrowse_review(sp_albumbrowse *alb);$/;"	v	language:C++
alb	api.h	/^SP_LIBEXPORT(int) sp_albumbrowse_backend_request_duration(sp_albumbrowse *alb);$/;"	v	language:C++
alb	api.h	/^SP_LIBEXPORT(int) sp_albumbrowse_num_copyrights(sp_albumbrowse *alb);$/;"	v	language:C++
alb	api.h	/^SP_LIBEXPORT(int) sp_albumbrowse_num_tracks(sp_albumbrowse *alb);$/;"	v	language:C++
alb	api.h	/^SP_LIBEXPORT(sp_album *) sp_albumbrowse_album(sp_albumbrowse *alb);$/;"	v	language:C++
alb	api.h	/^SP_LIBEXPORT(sp_artist *) sp_albumbrowse_artist(sp_albumbrowse *alb);$/;"	v	language:C++
alb	api.h	/^SP_LIBEXPORT(sp_error) sp_albumbrowse_add_ref(sp_albumbrowse *alb);$/;"	v	language:C++
alb	api.h	/^SP_LIBEXPORT(sp_error) sp_albumbrowse_error(sp_albumbrowse *alb);$/;"	v	language:C++
alb	api.h	/^SP_LIBEXPORT(sp_error) sp_albumbrowse_release(sp_albumbrowse *alb);$/;"	v	language:C++
album	api.h	/^SP_LIBEXPORT(bool) sp_album_is_available(sp_album *album);$/;"	v	language:C++
album	api.h	/^SP_LIBEXPORT(bool) sp_album_is_loaded(sp_album *album);$/;"	v	language:C++
album	api.h	/^SP_LIBEXPORT(const char *) sp_album_name(sp_album *album);$/;"	v	language:C++
album	api.h	/^SP_LIBEXPORT(int) sp_album_year(sp_album *album);$/;"	v	language:C++
album	api.h	/^SP_LIBEXPORT(sp_albumtype) sp_album_type(sp_album *album);$/;"	v	language:C++
album	api.h	/^SP_LIBEXPORT(sp_artist *) sp_album_artist(sp_album *album);$/;"	v	language:C++
album	api.h	/^SP_LIBEXPORT(sp_error) sp_album_add_ref(sp_album *album);$/;"	v	language:C++
album	api.h	/^SP_LIBEXPORT(sp_error) sp_album_release(sp_album *album);$/;"	v	language:C++
album	api.h	/^SP_LIBEXPORT(sp_link *) sp_link_create_from_album(sp_album *album);$/;"	v	language:C++
albumbrowse_complete_cb	api.h	/^typedef void SP_CALLCONV albumbrowse_complete_cb(sp_albumbrowse *result, void *userdata);$/;"	t	language:C++
api_version	api.h	/^  int api_version;                       \/\/\/< The version of the Spotify API your application is compiled with. Set to #SPOTIFY_API_VERSION$/;"	m	language:C++	struct:sp_session_config
application_key	api.h	/^  const void *application_key;           \/\/\/< Your application key$/;"	m	language:C++	struct:sp_session_config
application_key_size	api.h	/^  size_t application_key_size;           \/\/\/< The size of the application key in bytes$/;"	m	language:C++	struct:sp_session_config
arb	api.h	/^SP_LIBEXPORT(bool) sp_artistbrowse_is_loaded(sp_artistbrowse *arb);$/;"	v	language:C++
arb	api.h	/^SP_LIBEXPORT(const char *) sp_artistbrowse_biography(sp_artistbrowse *arb);$/;"	v	language:C++
arb	api.h	/^SP_LIBEXPORT(int) sp_artistbrowse_backend_request_duration(sp_artistbrowse *arb);$/;"	v	language:C++
arb	api.h	/^SP_LIBEXPORT(int) sp_artistbrowse_num_albums(sp_artistbrowse *arb);$/;"	v	language:C++
arb	api.h	/^SP_LIBEXPORT(int) sp_artistbrowse_num_portraits(sp_artistbrowse *arb);$/;"	v	language:C++
arb	api.h	/^SP_LIBEXPORT(int) sp_artistbrowse_num_similar_artists(sp_artistbrowse *arb);$/;"	v	language:C++
arb	api.h	/^SP_LIBEXPORT(int) sp_artistbrowse_num_tophit_tracks(sp_artistbrowse *arb);$/;"	v	language:C++
arb	api.h	/^SP_LIBEXPORT(int) sp_artistbrowse_num_tracks(sp_artistbrowse *arb);$/;"	v	language:C++
arb	api.h	/^SP_LIBEXPORT(sp_artist *) sp_artistbrowse_artist(sp_artistbrowse *arb);$/;"	v	language:C++
arb	api.h	/^SP_LIBEXPORT(sp_error) sp_artistbrowse_add_ref(sp_artistbrowse *arb);$/;"	v	language:C++
arb	api.h	/^SP_LIBEXPORT(sp_error) sp_artistbrowse_error(sp_artistbrowse *arb);$/;"	v	language:C++
arb	api.h	/^SP_LIBEXPORT(sp_error) sp_artistbrowse_release(sp_artistbrowse *arb);$/;"	v	language:C++
artist	api.h	/^SP_LIBEXPORT(bool) sp_artist_is_loaded(sp_artist *artist);$/;"	v	language:C++
artist	api.h	/^SP_LIBEXPORT(const char *) sp_artist_name(sp_artist *artist);$/;"	v	language:C++
artist	api.h	/^SP_LIBEXPORT(sp_error) sp_artist_add_ref(sp_artist *artist);$/;"	v	language:C++
artist	api.h	/^SP_LIBEXPORT(sp_error) sp_artist_release(sp_artist *artist);$/;"	v	language:C++
artist	api.h	/^SP_LIBEXPORT(sp_link *) sp_link_create_from_artist(sp_artist *artist);$/;"	v	language:C++
artistbrowse_complete_cb	api.h	/^typedef void SP_CALLCONV artistbrowse_complete_cb(sp_artistbrowse *result, void *userdata);$/;"	t	language:C++
bool	api.h	/^typedef unsigned char bool;$/;"	t	language:C++
byte	api.h	/^typedef unsigned char byte;$/;"	t	language:C++
ca_certs_filename	api.h	/^  const char *ca_certs_filename;$/;"	m	language:C++	struct:sp_session_config
cache_location	api.h	/^  const char *cache_location;            \/**< The location where Spotify will write cache files.$/;"	m	language:C++	struct:sp_session_config
callbacks	api.h	/^  const sp_session_callbacks *callbacks; \/\/\/< Delivery callbacks for session events, or NULL if you are not interested in any callbacks (not recommended!)$/;"	m	language:C++	struct:sp_session_config
channels	api.h	/^  int channels;                \/\/\/< Number of channels. Currently 1 or 2.$/;"	m	language:C++	struct:sp_audioformat
compress_playlists	api.h	/^  bool compress_playlists;$/;"	m	language:C++	struct:sp_session_config
connection_error	api.h	/^  void (SP_CALLCONV *connection_error)(sp_session *session, sp_error error);$/;"	m	language:C++	struct:sp_session_callbacks
connectionstate_updated	api.h	/^  void (SP_CALLCONV *connectionstate_updated)(sp_session *session);$/;"	m	language:C++	struct:sp_session_callbacks
container_loaded	api.h	/^  void (SP_CALLCONV *container_loaded)(sp_playlistcontainer *pc, void *userdata);$/;"	m	language:C++	struct:sp_playlistcontainer_callbacks
copied_bytes	api.h	/^  sp_uint64 copied_bytes;$/;"	m	language:C++	struct:sp_offline_sync_status
copied_tracks	api.h	/^  int copied_tracks;$/;"	m	language:C++	struct:sp_offline_sync_status
count	api.h	/^  unsigned int count;    \/\/\/< Number of elements in 'subscribers'$/;"	m	language:C++	struct:sp_subscribers
credentials_blob_updated	api.h	/^  void (SP_CALLCONV *credentials_blob_updated)(sp_session *session, const char *blob);$/;"	m	language:C++	struct:sp_session_callbacks
description_changed	api.h	/^  void (SP_CALLCONV *description_changed)(sp_playlist *pl, const char *desc, void *userdata);$/;"	m	language:C++	struct:sp_playlist_callbacks
device_id	api.h	/^  const char *device_id;$/;"	m	language:C++	struct:sp_session_config
done_bytes	api.h	/^  sp_uint64 done_bytes;$/;"	m	language:C++	struct:sp_offline_sync_status
done_tracks	api.h	/^  int done_tracks;$/;"	m	language:C++	struct:sp_offline_sync_status
dont_save_metadata_for_playlists	api.h	/^  bool dont_save_metadata_for_playlists;$/;"	m	language:C++	struct:sp_session_config
end_of_track	api.h	/^  void (SP_CALLCONV *end_of_track)(sp_session *session);$/;"	m	language:C++	struct:sp_session_callbacks
error	api.h	/^SP_LIBEXPORT(const char*) sp_error_message(sp_error error);$/;"	v	language:C++
error_tracks	api.h	/^  int error_tracks;$/;"	m	language:C++	struct:sp_offline_sync_status
get_audio_buffer_stats	api.h	/^  void (SP_CALLCONV *get_audio_buffer_stats)(sp_session *session, sp_audio_buffer_stats *stats);$/;"	m	language:C++	struct:sp_session_callbacks
image	api.h	/^SP_LIBEXPORT(bool) sp_image_is_loaded(sp_image *image);$/;"	v	language:C++
image	api.h	/^SP_LIBEXPORT(const byte *) sp_image_image_id(sp_image *image);$/;"	v	language:C++
image	api.h	/^SP_LIBEXPORT(sp_error) sp_image_add_ref(sp_image *image);$/;"	v	language:C++
image	api.h	/^SP_LIBEXPORT(sp_error) sp_image_error(sp_image *image);$/;"	v	language:C++
image	api.h	/^SP_LIBEXPORT(sp_error) sp_image_release(sp_image *image);$/;"	v	language:C++
image	api.h	/^SP_LIBEXPORT(sp_imageformat) sp_image_format(sp_image *image);$/;"	v	language:C++
image	api.h	/^SP_LIBEXPORT(sp_link *) sp_link_create_from_image(sp_image *image);$/;"	v	language:C++
image_changed	api.h	/^  void (SP_CALLCONV *image_changed)(sp_playlist *pl, const byte *image, void *userdata);$/;"	m	language:C++	struct:sp_playlist_callbacks
image_loaded_cb	api.h	/^typedef void SP_CALLCONV image_loaded_cb(sp_image *image, void *userdata);$/;"	t	language:C++
inbox	api.h	/^SP_LIBEXPORT(sp_error) sp_inbox_add_ref(sp_inbox *inbox);$/;"	v	language:C++
inbox	api.h	/^SP_LIBEXPORT(sp_error) sp_inbox_error(sp_inbox *inbox);$/;"	v	language:C++
inbox	api.h	/^SP_LIBEXPORT(sp_error) sp_inbox_release(sp_inbox *inbox);$/;"	v	language:C++
inboxpost_complete_cb	api.h	/^typedef void SP_CALLCONV inboxpost_complete_cb(sp_inbox *result, void *userdata);$/;"	t	language:C++
initially_unload_playlists	api.h	/^  bool initially_unload_playlists;$/;"	m	language:C++	struct:sp_session_config
link	api.h	/^SP_LIBEXPORT(sp_album *) sp_link_as_album(sp_link *link);$/;"	v	language:C++
link	api.h	/^SP_LIBEXPORT(sp_artist *) sp_link_as_artist(sp_link *link);$/;"	v	language:C++
link	api.h	/^SP_LIBEXPORT(sp_error) sp_link_add_ref(sp_link *link);$/;"	v	language:C++
link	api.h	/^SP_LIBEXPORT(sp_error) sp_link_release(sp_link *link);$/;"	v	language:C++
link	api.h	/^SP_LIBEXPORT(sp_linktype) sp_link_type(sp_link *link);$/;"	v	language:C++
link	api.h	/^SP_LIBEXPORT(sp_track *) sp_link_as_track(sp_link *link);$/;"	v	language:C++
link	api.h	/^SP_LIBEXPORT(sp_user *) sp_link_as_user(sp_link *link);$/;"	v	language:C++
log_message	api.h	/^  void (SP_CALLCONV *log_message)(sp_session *session, const char *data);$/;"	m	language:C++	struct:sp_session_callbacks
logged_in	api.h	/^  void (SP_CALLCONV *logged_in)(sp_session *session, sp_error error);$/;"	m	language:C++	struct:sp_session_callbacks
logged_out	api.h	/^  void (SP_CALLCONV *logged_out)(sp_session *session);$/;"	m	language:C++	struct:sp_session_callbacks
message_to_user	api.h	/^  void (SP_CALLCONV *message_to_user)(sp_session *session, const char *message);$/;"	m	language:C++	struct:sp_session_callbacks
metadata_updated	api.h	/^  void (SP_CALLCONV *metadata_updated)(sp_session *session);$/;"	m	language:C++	struct:sp_session_callbacks
music_delivery	api.h	/^  int (SP_CALLCONV *music_delivery)(sp_session *session, const sp_audioformat *format, const void *frames, int num_frames);$/;"	m	language:C++	struct:sp_session_callbacks
notify_main_thread	api.h	/^  void (SP_CALLCONV *notify_main_thread)(sp_session *session);$/;"	m	language:C++	struct:sp_session_callbacks
offline_error	api.h	/^  void (SP_CALLCONV *offline_error)(sp_session *session, sp_error error);$/;"	m	language:C++	struct:sp_session_callbacks
offline_status_updated	api.h	/^  void (SP_CALLCONV *offline_status_updated)(sp_session *session);$/;"	m	language:C++	struct:sp_session_callbacks
pc	api.h	/^SP_LIBEXPORT(bool) sp_playlistcontainer_is_loaded(sp_playlistcontainer *pc);$/;"	v	language:C++
pc	api.h	/^SP_LIBEXPORT(int) sp_playlistcontainer_num_playlists(sp_playlistcontainer *pc);$/;"	v	language:C++
pc	api.h	/^SP_LIBEXPORT(sp_error) sp_playlistcontainer_add_ref(sp_playlistcontainer *pc);$/;"	v	language:C++
pc	api.h	/^SP_LIBEXPORT(sp_error) sp_playlistcontainer_release(sp_playlistcontainer *pc);$/;"	v	language:C++
pc	api.h	/^SP_LIBEXPORT(sp_user *) sp_playlistcontainer_owner(sp_playlistcontainer *pc);$/;"	v	language:C++
play_token_lost	api.h	/^  void (SP_CALLCONV *play_token_lost)(sp_session *session);$/;"	m	language:C++	struct:sp_session_callbacks
playlist	api.h	/^SP_LIBEXPORT(bool) sp_playlist_has_pending_changes(sp_playlist *playlist);$/;"	v	language:C++
playlist	api.h	/^SP_LIBEXPORT(bool) sp_playlist_is_collaborative(sp_playlist *playlist);$/;"	v	language:C++
playlist	api.h	/^SP_LIBEXPORT(bool) sp_playlist_is_loaded(sp_playlist *playlist);$/;"	v	language:C++
playlist	api.h	/^SP_LIBEXPORT(const char *) sp_playlist_get_description(sp_playlist *playlist);$/;"	v	language:C++
playlist	api.h	/^SP_LIBEXPORT(const char *) sp_playlist_name(sp_playlist *playlist);$/;"	v	language:C++
playlist	api.h	/^SP_LIBEXPORT(int) sp_playlist_num_tracks(sp_playlist *playlist);$/;"	v	language:C++
playlist	api.h	/^SP_LIBEXPORT(sp_error) sp_playlist_add_ref(sp_playlist *playlist);$/;"	v	language:C++
playlist	api.h	/^SP_LIBEXPORT(sp_error) sp_playlist_release(sp_playlist *playlist);$/;"	v	language:C++
playlist	api.h	/^SP_LIBEXPORT(sp_link *) sp_link_create_from_playlist(sp_playlist *playlist);$/;"	v	language:C++
playlist	api.h	/^SP_LIBEXPORT(sp_subscribers *) sp_playlist_subscribers(sp_playlist *playlist);$/;"	v	language:C++
playlist	api.h	/^SP_LIBEXPORT(sp_user *) sp_playlist_owner(sp_playlist *playlist);$/;"	v	language:C++
playlist	api.h	/^SP_LIBEXPORT(unsigned int) sp_playlist_num_subscribers(sp_playlist *playlist);$/;"	v	language:C++
playlist_added	api.h	/^  void (SP_CALLCONV *playlist_added)(sp_playlistcontainer *pc, sp_playlist *playlist, int position, void *userdata);$/;"	m	language:C++	struct:sp_playlistcontainer_callbacks
playlist_metadata_updated	api.h	/^  void (SP_CALLCONV *playlist_metadata_updated)(sp_playlist *pl, void *userdata);$/;"	m	language:C++	struct:sp_playlist_callbacks
playlist_moved	api.h	/^  void (SP_CALLCONV *playlist_moved)(sp_playlistcontainer *pc, sp_playlist *playlist, int position, int new_position, void *userdata);$/;"	m	language:C++	struct:sp_playlistcontainer_callbacks
playlist_removed	api.h	/^  void (SP_CALLCONV *playlist_removed)(sp_playlistcontainer *pc, sp_playlist *playlist, int position, void *userdata);$/;"	m	language:C++	struct:sp_playlistcontainer_callbacks
playlist_renamed	api.h	/^  void (SP_CALLCONV *playlist_renamed)(sp_playlist *pl, void *userdata);$/;"	m	language:C++	struct:sp_playlist_callbacks
playlist_state_changed	api.h	/^  void (SP_CALLCONV *playlist_state_changed)(sp_playlist *pl, void *userdata);$/;"	m	language:C++	struct:sp_playlist_callbacks
playlist_update_in_progress	api.h	/^  void (SP_CALLCONV *playlist_update_in_progress)(sp_playlist *pl, bool done, void *userdata);$/;"	m	language:C++	struct:sp_playlist_callbacks
private_session_mode_changed	api.h	/^  void (SP_CALLCONV *private_session_mode_changed)(sp_session *session, bool is_private);$/;"	m	language:C++	struct:sp_session_callbacks
proxy	api.h	/^  const char *proxy;$/;"	m	language:C++	struct:sp_session_config
proxy_password	api.h	/^  const char *proxy_password;$/;"	m	language:C++	struct:sp_session_config
proxy_username	api.h	/^  const char *proxy_username;$/;"	m	language:C++	struct:sp_session_config
queued_bytes	api.h	/^  sp_uint64 queued_bytes;$/;"	m	language:C++	struct:sp_offline_sync_status
queued_tracks	api.h	/^  int queued_tracks;$/;"	m	language:C++	struct:sp_offline_sync_status
sample_rate	api.h	/^  int sample_rate;             \/\/\/< Audio sample rate, in samples per second.$/;"	m	language:C++	struct:sp_audioformat
sample_type	api.h	/^  sp_sampletype sample_type;   \/\/\/< Sample type enum,$/;"	m	language:C++	struct:sp_audioformat
samples	api.h	/^  int samples;                      \/\/\/< Samples in buffer$/;"	m	language:C++	struct:sp_audio_buffer_stats
scrobble_error	api.h	/^  void (SP_CALLCONV *scrobble_error)(sp_session *session, sp_error error);$/;"	m	language:C++	struct:sp_session_callbacks
search	api.h	/^SP_LIBEXPORT(bool) sp_search_is_loaded(sp_search *search);$/;"	v	language:C++
search	api.h	/^SP_LIBEXPORT(const char *) sp_search_did_you_mean(sp_search *search);$/;"	v	language:C++
search	api.h	/^SP_LIBEXPORT(const char *) sp_search_query(sp_search *search);$/;"	v	language:C++
search	api.h	/^SP_LIBEXPORT(int) sp_search_num_albums(sp_search *search);$/;"	v	language:C++
search	api.h	/^SP_LIBEXPORT(int) sp_search_num_artists(sp_search *search);$/;"	v	language:C++
search	api.h	/^SP_LIBEXPORT(int) sp_search_num_playlists(sp_search *search);$/;"	v	language:C++
search	api.h	/^SP_LIBEXPORT(int) sp_search_num_tracks(sp_search *search);$/;"	v	language:C++
search	api.h	/^SP_LIBEXPORT(int) sp_search_total_albums(sp_search *search);$/;"	v	language:C++
search	api.h	/^SP_LIBEXPORT(int) sp_search_total_artists(sp_search *search);$/;"	v	language:C++
search	api.h	/^SP_LIBEXPORT(int) sp_search_total_playlists(sp_search *search);$/;"	v	language:C++
search	api.h	/^SP_LIBEXPORT(int) sp_search_total_tracks(sp_search *search);$/;"	v	language:C++
search	api.h	/^SP_LIBEXPORT(sp_error) sp_search_add_ref(sp_search *search);$/;"	v	language:C++
search	api.h	/^SP_LIBEXPORT(sp_error) sp_search_error(sp_search *search);$/;"	v	language:C++
search	api.h	/^SP_LIBEXPORT(sp_error) sp_search_release(sp_search *search);$/;"	v	language:C++
search	api.h	/^SP_LIBEXPORT(sp_link *) sp_link_create_from_search(sp_search *search);$/;"	v	language:C++
search_complete_cb	api.h	/^typedef void SP_CALLCONV search_complete_cb(sp_search *result, void *userdata);$/;"	t	language:C++
sess	api.h	/^SP_LIBEXPORT(sp_error) sp_session_release(sp_session *sess);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(bool) sp_session_get_volume_normalization(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(bool) sp_session_is_private_session(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(const char *) sp_session_user_name(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(int) sp_offline_num_playlists(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(int) sp_offline_time_left(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(int) sp_offline_tracks_to_sync(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(int) sp_session_user_country(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(sp_connectionstate) sp_session_connectionstate(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(sp_error) sp_session_flush_caches(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(sp_error) sp_session_forget_me(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(sp_error) sp_session_logout(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(sp_error) sp_session_player_unload(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(sp_error) sp_session_relogin(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(sp_playlist *) sp_session_inbox_create(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(sp_playlist *) sp_session_starred_create(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(sp_playlistcontainer *) sp_session_playlistcontainer(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(sp_user *) sp_session_user(sp_session *session);$/;"	v	language:C++
session	api.h	/^SP_LIBEXPORT(void *) sp_session_userdata(sp_session *session);$/;"	v	language:C++
settings_location	api.h	/^  const char *settings_location;         \/**< The location where Spotify will write setting files and per-user$/;"	m	language:C++	struct:sp_session_config
sp_album	api.h	/^typedef struct sp_album sp_album; \/\/\/< An album handle$/;"	t	language:C++	typeref:struct:sp_album
sp_albumbrowse	api.h	/^typedef struct sp_albumbrowse sp_albumbrowse; \/\/\/< A handle to an album browse result$/;"	t	language:C++	typeref:struct:sp_albumbrowse
sp_albumtype	api.h	/^} sp_albumtype;$/;"	t	language:C++	typeref:enum:__anon2
sp_artist	api.h	/^typedef struct sp_artist sp_artist; \/\/\/< An artist handle$/;"	t	language:C++	typeref:struct:sp_artist
sp_artistbrowse	api.h	/^typedef struct sp_artistbrowse sp_artistbrowse; \/\/\/< A handle to an artist browse result$/;"	t	language:C++	typeref:struct:sp_artistbrowse
sp_artistbrowse_type	api.h	/^typedef enum sp_artistbrowse_type {$/;"	g	language:C++
sp_artistbrowse_type	api.h	/^} sp_artistbrowse_type;$/;"	t	language:C++	typeref:enum:sp_artistbrowse_type
sp_audio_buffer_stats	api.h	/^typedef struct sp_audio_buffer_stats {$/;"	s	language:C++
sp_audio_buffer_stats	api.h	/^} sp_audio_buffer_stats;$/;"	t	language:C++	typeref:struct:sp_audio_buffer_stats
sp_audioformat	api.h	/^typedef struct sp_audioformat {$/;"	s	language:C++
sp_audioformat	api.h	/^} sp_audioformat;$/;"	t	language:C++	typeref:struct:sp_audioformat
sp_availability	api.h	/^typedef enum sp_availability {$/;"	g	language:C++
sp_bitrate	api.h	/^typedef enum sp_bitrate {$/;"	g	language:C++
sp_bitrate	api.h	/^} sp_bitrate;$/;"	t	language:C++	typeref:enum:sp_bitrate
sp_connection_rules	api.h	/^typedef enum sp_connection_rules {$/;"	g	language:C++
sp_connection_rules	api.h	/^} sp_connection_rules;$/;"	t	language:C++	typeref:enum:sp_connection_rules
sp_connection_type	api.h	/^typedef enum sp_connection_type {$/;"	g	language:C++
sp_connection_type	api.h	/^} sp_connection_type;$/;"	t	language:C++	typeref:enum:sp_connection_type
sp_connectionstate	api.h	/^typedef enum sp_connectionstate {$/;"	g	language:C++
sp_connectionstate	api.h	/^} sp_connectionstate;$/;"	t	language:C++	typeref:enum:sp_connectionstate
sp_error	api.h	/^typedef enum sp_error {$/;"	g	language:C++
sp_error	api.h	/^} sp_error;$/;"	t	language:C++	typeref:enum:sp_error
sp_image	api.h	/^typedef struct sp_image sp_image; \/\/\/< A handle to an image$/;"	t	language:C++	typeref:struct:sp_image
sp_image_size	api.h	/^typedef enum sp_image_size {$/;"	g	language:C++
sp_image_size	api.h	/^} sp_image_size;$/;"	t	language:C++	typeref:enum:sp_image_size
sp_imageformat	api.h	/^} sp_imageformat;$/;"	t	language:C++	typeref:enum:__anon3
sp_inbox	api.h	/^typedef struct sp_inbox sp_inbox; \/\/\/< Add to inbox request handle$/;"	t	language:C++	typeref:struct:sp_inbox
sp_link	api.h	/^typedef struct sp_link sp_link; \/\/\/< A handle to the libspotify internal representation of a URI$/;"	t	language:C++	typeref:struct:sp_link
sp_linktype	api.h	/^} sp_linktype;$/;"	t	language:C++	typeref:enum:__anon1
sp_offline_sync_status	api.h	/^typedef struct sp_offline_sync_status {$/;"	s	language:C++
sp_offline_sync_status	api.h	/^} sp_offline_sync_status;$/;"	t	language:C++	typeref:struct:sp_offline_sync_status
sp_playlist	api.h	/^typedef struct sp_playlist sp_playlist; \/\/\/< A playlist handle$/;"	t	language:C++	typeref:struct:sp_playlist
sp_playlist_callbacks	api.h	/^typedef struct sp_playlist_callbacks {$/;"	s	language:C++
sp_playlist_callbacks	api.h	/^} sp_playlist_callbacks;$/;"	t	language:C++	typeref:struct:sp_playlist_callbacks
sp_playlist_offline_status	api.h	/^typedef enum sp_playlist_offline_status {$/;"	g	language:C++
sp_playlist_offline_status	api.h	/^} sp_playlist_offline_status;$/;"	t	language:C++	typeref:enum:sp_playlist_offline_status
sp_playlist_type	api.h	/^typedef enum sp_playlist_type {$/;"	g	language:C++
sp_playlist_type	api.h	/^} sp_playlist_type;$/;"	t	language:C++	typeref:enum:sp_playlist_type
sp_playlistcontainer	api.h	/^typedef struct sp_playlistcontainer sp_playlistcontainer; \/\/\/< A playlist container (playlist containing other playlists) handle$/;"	t	language:C++	typeref:struct:sp_playlistcontainer
sp_playlistcontainer_callbacks	api.h	/^typedef struct sp_playlistcontainer_callbacks {$/;"	s	language:C++
sp_playlistcontainer_callbacks	api.h	/^} sp_playlistcontainer_callbacks;$/;"	t	language:C++	typeref:struct:sp_playlistcontainer_callbacks
sp_relation_type	api.h	/^typedef enum sp_relation_type {$/;"	g	language:C++
sp_relation_type	api.h	/^} sp_relation_type;$/;"	t	language:C++	typeref:enum:sp_relation_type
sp_sampletype	api.h	/^typedef enum sp_sampletype {$/;"	g	language:C++
sp_sampletype	api.h	/^} sp_sampletype;$/;"	t	language:C++	typeref:enum:sp_sampletype
sp_scrobbling_state	api.h	/^typedef enum sp_scrobbling_state {$/;"	g	language:C++
sp_scrobbling_state	api.h	/^} sp_scrobbling_state;$/;"	t	language:C++	typeref:enum:sp_scrobbling_state
sp_search	api.h	/^typedef struct sp_search sp_search; \/\/\/< A handle to a search result$/;"	t	language:C++	typeref:struct:sp_search
sp_search_type	api.h	/^typedef enum sp_search_type {$/;"	g	language:C++
sp_search_type	api.h	/^} sp_search_type;$/;"	t	language:C++	typeref:enum:sp_search_type
sp_session	api.h	/^typedef struct sp_session sp_session; \/\/\/< Representation of a session$/;"	t	language:C++	typeref:struct:sp_session
sp_session_callbacks	api.h	/^typedef struct sp_session_callbacks {$/;"	s	language:C++
sp_session_callbacks	api.h	/^} sp_session_callbacks;$/;"	t	language:C++	typeref:struct:sp_session_callbacks
sp_session_config	api.h	/^typedef struct sp_session_config {$/;"	s	language:C++
sp_session_config	api.h	/^} sp_session_config;$/;"	t	language:C++	typeref:struct:sp_session_config
sp_social_provider	api.h	/^typedef enum sp_social_provider {$/;"	g	language:C++
sp_social_provider	api.h	/^} sp_social_provider;$/;"	t	language:C++	typeref:enum:sp_social_provider
sp_subscribers	api.h	/^typedef struct sp_subscribers {$/;"	s	language:C++
sp_subscribers	api.h	/^} sp_subscribers;$/;"	t	language:C++	typeref:struct:sp_subscribers
sp_toplistbrowse	api.h	/^typedef struct sp_toplistbrowse sp_toplistbrowse; \/\/\/< A handle to a toplist browse result$/;"	t	language:C++	typeref:struct:sp_toplistbrowse
sp_toplistregion	api.h	/^} sp_toplistregion;$/;"	t	language:C++	typeref:enum:__anon5
sp_toplisttype	api.h	/^} sp_toplisttype;$/;"	t	language:C++	typeref:enum:__anon4
sp_track	api.h	/^typedef struct sp_track sp_track; \/\/\/< A track handle$/;"	t	language:C++	typeref:struct:sp_track
sp_track_availability	api.h	/^} sp_track_availability;$/;"	t	language:C++	typeref:enum:sp_availability
sp_track_offline_status	api.h	/^typedef enum sp_track_offline_status {$/;"	g	language:C++
sp_track_offline_status	api.h	/^} sp_track_offline_status;$/;"	t	language:C++	typeref:enum:sp_track_offline_status
sp_uint64	api.h	/^typedef uint64_t sp_uint64;$/;"	t	language:C++
sp_uint64	api.h	/^typedef unsigned __int64 sp_uint64;$/;"	t	language:C++
sp_user	api.h	/^typedef struct sp_user sp_user; \/\/\/< A handle to a user$/;"	t	language:C++	typeref:struct:sp_user
start_playback	api.h	/^  void (SP_CALLCONV *start_playback)(sp_session *session);$/;"	m	language:C++	struct:sp_session_callbacks
stop_playback	api.h	/^  void (SP_CALLCONV *stop_playback)(sp_session *session);$/;"	m	language:C++	struct:sp_session_callbacks
streaming_error	api.h	/^  void (SP_CALLCONV *streaming_error)(sp_session *session, sp_error error);$/;"	m	language:C++	struct:sp_session_callbacks
stutter	api.h	/^  int stutter;                      \/\/\/< Number of stutters (audio dropouts) since last query$/;"	m	language:C++	struct:sp_audio_buffer_stats
subscribers	api.h	/^  char *subscribers[1];  \/\/\/< Actual size is 'count'. Array of pointers to canonical usernames$/;"	m	language:C++	struct:sp_subscribers
subscribers	api.h	/^SP_LIBEXPORT(sp_error) sp_playlist_subscribers_free(sp_subscribers *subscribers);$/;"	v	language:C++
subscribers_changed	api.h	/^  void (SP_CALLCONV *subscribers_changed)(sp_playlist *pl, void *userdata);$/;"	m	language:C++	struct:sp_playlist_callbacks
syncing	api.h	/^  bool syncing;$/;"	m	language:C++	struct:sp_offline_sync_status
tlb	api.h	/^SP_LIBEXPORT(bool) sp_toplistbrowse_is_loaded(sp_toplistbrowse *tlb);$/;"	v	language:C++
tlb	api.h	/^SP_LIBEXPORT(int) sp_toplistbrowse_backend_request_duration(sp_toplistbrowse *tlb);$/;"	v	language:C++
tlb	api.h	/^SP_LIBEXPORT(int) sp_toplistbrowse_num_albums(sp_toplistbrowse *tlb);$/;"	v	language:C++
tlb	api.h	/^SP_LIBEXPORT(int) sp_toplistbrowse_num_artists(sp_toplistbrowse *tlb);$/;"	v	language:C++
tlb	api.h	/^SP_LIBEXPORT(int) sp_toplistbrowse_num_tracks(sp_toplistbrowse *tlb);$/;"	v	language:C++
tlb	api.h	/^SP_LIBEXPORT(sp_error) sp_toplistbrowse_add_ref(sp_toplistbrowse *tlb);$/;"	v	language:C++
tlb	api.h	/^SP_LIBEXPORT(sp_error) sp_toplistbrowse_error(sp_toplistbrowse *tlb);$/;"	v	language:C++
tlb	api.h	/^SP_LIBEXPORT(sp_error) sp_toplistbrowse_release(sp_toplistbrowse *tlb);$/;"	v	language:C++
toplistbrowse_complete_cb	api.h	/^typedef void SP_CALLCONV toplistbrowse_complete_cb(sp_toplistbrowse *result, void *userdata);$/;"	t	language:C++
tracefile	api.h	/^  const char *tracefile;$/;"	m	language:C++	struct:sp_session_config
track	api.h	/^SP_LIBEXPORT(bool) sp_track_is_loaded(sp_track *track);$/;"	v	language:C++
track	api.h	/^SP_LIBEXPORT(bool) sp_track_is_placeholder(sp_track *track);$/;"	v	language:C++
track	api.h	/^SP_LIBEXPORT(const char *) sp_track_name(sp_track *track);$/;"	v	language:C++
track	api.h	/^SP_LIBEXPORT(int) sp_track_disc(sp_track *track);$/;"	v	language:C++
track	api.h	/^SP_LIBEXPORT(int) sp_track_duration(sp_track *track);$/;"	v	language:C++
track	api.h	/^SP_LIBEXPORT(int) sp_track_index(sp_track *track);$/;"	v	language:C++
track	api.h	/^SP_LIBEXPORT(int) sp_track_num_artists(sp_track *track);$/;"	v	language:C++
track	api.h	/^SP_LIBEXPORT(int) sp_track_popularity(sp_track *track);$/;"	v	language:C++
track	api.h	/^SP_LIBEXPORT(sp_album *) sp_track_album(sp_track *track);$/;"	v	language:C++
track	api.h	/^SP_LIBEXPORT(sp_error) sp_track_add_ref(sp_track *track);$/;"	v	language:C++
track	api.h	/^SP_LIBEXPORT(sp_error) sp_track_error(sp_track *track);$/;"	v	language:C++
track	api.h	/^SP_LIBEXPORT(sp_error) sp_track_release(sp_track *track);$/;"	v	language:C++
track	api.h	/^SP_LIBEXPORT(sp_track_offline_status) sp_track_offline_get_status(sp_track *track);$/;"	v	language:C++
track_created_changed	api.h	/^  void (SP_CALLCONV *track_created_changed)(sp_playlist *pl, int position, sp_user *user, int when, void *userdata);$/;"	m	language:C++	struct:sp_playlist_callbacks
track_message_changed	api.h	/^  void (SP_CALLCONV *track_message_changed)(sp_playlist *pl, int position, const char *message, void *userdata);$/;"	m	language:C++	struct:sp_playlist_callbacks
track_seen_changed	api.h	/^  void (SP_CALLCONV *track_seen_changed)(sp_playlist *pl, int position, bool seen, void *userdata);$/;"	m	language:C++	struct:sp_playlist_callbacks
tracks_added	api.h	/^  void (SP_CALLCONV *tracks_added)(sp_playlist *pl, sp_track * const *tracks, int num_tracks, int position, void *userdata);$/;"	m	language:C++	struct:sp_playlist_callbacks
tracks_moved	api.h	/^  void (SP_CALLCONV *tracks_moved)(sp_playlist *pl, const int *tracks, int num_tracks, int new_position, void *userdata);$/;"	m	language:C++	struct:sp_playlist_callbacks
tracks_removed	api.h	/^  void (SP_CALLCONV *tracks_removed)(sp_playlist *pl, const int *tracks, int num_tracks, void *userdata);$/;"	m	language:C++	struct:sp_playlist_callbacks
user	api.h	/^SP_LIBEXPORT(bool) sp_user_is_loaded(sp_user *user);$/;"	v	language:C++
user	api.h	/^SP_LIBEXPORT(const char *) sp_user_canonical_name(sp_user *user);$/;"	v	language:C++
user	api.h	/^SP_LIBEXPORT(const char *) sp_user_display_name(sp_user *user);$/;"	v	language:C++
user	api.h	/^SP_LIBEXPORT(sp_error) sp_user_add_ref(sp_user *user);$/;"	v	language:C++
user	api.h	/^SP_LIBEXPORT(sp_error) sp_user_release(sp_user *user);$/;"	v	language:C++
user	api.h	/^SP_LIBEXPORT(sp_link *) sp_link_create_from_user(sp_user *user);$/;"	v	language:C++
user_agent	api.h	/^  const char *user_agent;                \/**< "User-Agent" for your application - max 255 characters long$/;"	m	language:C++	struct:sp_session_config
userdata	api.h	/^  void *userdata;                        \/\/\/< User supplied data for your application$/;"	m	language:C++	struct:sp_session_config
userinfo_updated	api.h	/^  void (SP_CALLCONV *userinfo_updated)(sp_session *session);$/;"	m	language:C++	struct:sp_session_callbacks
willnotcopy_tracks	api.h	/^  int willnotcopy_tracks;$/;"	m	language:C++	struct:sp_offline_sync_status
